generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
  schemas  = ["public"]
}

model Business {
  id                        String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name                String?
  last_name                 String?
  email                     String               @unique
  store_name                String?
  slug                      String               @unique
  description               String?
  url                       String?
  wallet_address            String?
  commission                Int?
  status                    String               @default("Inactive")
  created_at                DateTime             @default(now())
  updated_at                DateTime             @updatedAt
  affiliate_hub_description String?
  svix_consumer_app_id      String?
  payment_preference        PaymentPreference    @default(FullCrypto)
  affiliate_business        Affiliate_Business[]
  messages                  Messages[]
  orders                    Orders[]
  pipelines                 Pipelines[]
  products                  Products[]
  pending_payments          Pending_Payments[]

  @@schema("public")
}

model Messages {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message     String
  type        String
  sent_at     DateTime   @default(now())
  business_id String     @db.Uuid
  message_id  String?
  email       String?
  name        String?
  subject     String
  parent_id   String?    @db.Uuid
  channel_id  String?
  video_id    String?
  business    Business   @relation(fields: [business_id], references: [id])
  parent      Messages?  @relation("MessageReplies", fields: [parent_id], references: [id])
  replies     Messages[] @relation("MessageReplies")

  @@schema("public")
}

model Affiliates {
  first_name                 String?
  last_name                  String?
  email                      String                       @unique
  description                String?
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @updatedAt
  status                     String                       @default("Pending")
  wallet_address             String?
  embedding                  Unsupported("vector")?
  metadata                   Json?
  social_media_profiles      Json?
  id                         Int                          @id @default(autoincrement())
  affiliate_business         Affiliate_Business[]
  orders                     Orders[]
  affiliate_pending_payments Affiliate_Pending_Payments[]

  @@schema("public")
}

model Affiliate_Business {
  id                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_id        String     @db.Uuid
  affiliate_id       Int
  affiliate_link     String?
  affiliate_link_key String?
  product_id         Int?
  affiliate          Affiliates @relation(fields: [affiliate_id], references: [id])
  business           Business   @relation(fields: [business_id], references: [id])
  products           Products?  @relation(fields: [product_id], references: [id])

  @@unique([business_id, affiliate_id])
  @@index([business_id], map: "business_id")
  @@index([affiliate_id], map: "affiliate_id")
  @@schema("public")
}

model Orders {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_name    String?
  customer_email   String
  customer_address String?
  invoice_url      String?
  status           String?
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  business_id      String?     @db.Uuid
  affiliate_id     Int?
  product_id       Int?
  affiliate        Affiliates? @relation(fields: [affiliate_id], references: [id])
  business         Business?   @relation(fields: [business_id], references: [id])
  products         Products?   @relation(fields: [product_id], references: [id])

  @@schema("public")
}

model Products {
  name               String
  description        String
  image_url          String?
  price              Float
  created_at         DateTime               @default(now())
  updated_at         DateTime               @updatedAt
  status             String                 @default("Published")
  business_id        String?                @db.Uuid
  metadata           Json?
  id                 Int                    @id @default(autoincrement())
  embedding          Unsupported("vector")?
  affiliate_business Affiliate_Business[]
  orders             Orders[]
  pipelines          Pipelines[]
  business           Business?              @relation(fields: [business_id], references: [id])

  @@schema("public")
}

model Pipelines {
  id              Int       @id @default(autoincrement())
  prompt          String?
  remark          String?
  affiliate_count Int?
  business_id     String?   @db.Uuid
  product_id      Int?
  format          String?
  location        String?
  heygen_video_id String?
  ig_post_id      String?
  ig_post_url     String?

  Business        Business? @relation(fields: [business_id], references: [id])
  Products        Products? @relation(fields: [product_id], references: [id])

  @@schema("public")
}

model Waitlist {
  id         String   @id @default(cuid())
  email      String   @unique
  created_at DateTime @default(now())

  @@schema("public")
}

model Pending_Payments {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_id   String    @db.Uuid
  product_id    Int
  full_amount   Decimal?  @db.Decimal(10, 2)
  fiat_amount   Decimal?  @db.Decimal(10, 2)
  crypto_amount Decimal?  @db.Decimal(10, 2)
  payout_date   DateTime? @db.Date
  status        String    @default("Pending")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  business      Business  @relation(fields: [business_id], references: [id])

  @@map("pending_payments")
  @@schema("public")
}

model Affiliate_Pending_Payments {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  affiliate_id  Int
  product_id    Int
  full_amount   Decimal?   @db.Decimal(10, 2)
  fiat_amount   Decimal?   @db.Decimal(10, 2)
  crypto_amount Decimal?   @db.Decimal(10, 2)
  payout_date   DateTime?  @db.Date
  status        String     @default("Pending")
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  affiliate     Affiliates @relation(fields: [affiliate_id], references: [id])

  @@map("affiliate_pending_payments")
  @@schema("public")
}

model embeddings {
  id          BigInt                 @id @default(autoincrement())
  created_at  DateTime               @default(now()) @db.Timestamptz(6)
  content     String?
  embedding   Unsupported("vector")?
  resource_id BigInt?
  resources   resources?             @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model ig_chat_history {
  id              BigInt   @id @default(autoincrement())
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  ig_recipient_id String?
  message         String?
  role            String?

  @@schema("public")
}

model resources {
  id         BigInt       @id @default(autoincrement())
  content    String?      @default("")
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  embeddings embeddings[]

  @@schema("public")
}

model ig_access_token {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String
  expires_at String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@schema("public")
}

enum PaymentPreference {
  FullCrypto
  HalfCryptoHalfFiat
  FullFiat

  @@schema("public")
}
