generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
  schemas  = ["public"]
}

enum PaymentPreference {
  FullCrypto
  HalfCryptoHalfFiat
  FullFiat

  @@schema("public")
}

model Business {
  id                        String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name                String?
  last_name                 String?
  email                     String               @unique
  store_name                String?
  slug                      String               @unique
  description               String?
  url                       String?
  wallet_address            String?
  commission                Int?
  status                    String               @default("Inactive")
  created_at                DateTime             @default(now())
  updated_at                DateTime             @updatedAt
  affiliate_hub_description String?
  svix_consumer_app_id      String?
  payment_preference        PaymentPreference    @default(FullCrypto)
  products                  Products[]
  orders                    Orders[]
  affiliate_business        Affiliate_Business[]
  messages                  Messages[]
  pipelines                 Pipelines[]
  pending_payments          Pending_Payments[]

  @@schema("public")
}

model Messages {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?
  email      String?
  channel_id String?
  video_id   String?
  subject    String
  message    String
  message_id String?
  type       String
  sent_at    DateTime @default(now())

  business_id String   @db.Uuid
  business    Business @relation(fields: [business_id], references: [id])

  // Self-referential relationship
  parent_id String?    @db.Uuid
  parent    Messages?  @relation("MessageReplies", fields: [parent_id], references: [id])
  replies   Messages[] @relation("MessageReplies")

  @@schema("public")
}

model Affiliates {
  id                    Int                    @id @default(autoincrement())
  first_name            String?
  last_name             String?
  email                 String                 @unique
  description           String?
  social_media_profiles Json?
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  status                String                 @default("Pending") // Pending, Approved and Not Approved
  wallet_address        String?
  metadata              Json?
  embedding             Unsupported("vector")?

  orders             Orders[]
  affiliate_business Affiliate_Business[]

  @@schema("public")
}

model Affiliate_Business {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  affiliate_link     String?
  affiliate_link_key String?

  business    Business @relation(fields: [business_id], references: [id])
  business_id String   @db.Uuid

  affiliate    Affiliates @relation(fields: [affiliate_id], references: [id])
  affiliate_id Int

  @@unique([business_id, affiliate_id])
  @@index([business_id], name: "business_id")
  @@index([affiliate_id], name: "affiliate_id")
  @@schema("public")
}

model Orders {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_name    String?
  customer_email   String
  customer_address String?
  invoice_url      String?
  status           String?
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  Business         Business?   @relation(fields: [business_id], references: [id])
  business_id      String?     @db.Uuid
  Products         Products?   @relation(fields: [product_id], references: [id])
  product_id       Int?
  affiliate        Affiliates? @relation(fields: [affiliate_id], references: [id])
  affiliate_id     Int?

  @@schema("public")
}

model Products {
  id          Int                    @id @default(autoincrement())
  name        String
  description String
  image_url   String?
  price       Float
  created_at  DateTime               @default(now())
  updated_at  DateTime               @updatedAt
  status      String                 @default("Published") // Draft, Published
  metadata    Json?
  embedding   Unsupported("vector")?

  Business    Business? @relation(fields: [business_id], references: [id])
  business_id String?   @db.Uuid
  orders      Orders[]
  pipelines   Pipelines[]

  @@schema("public")
}

model Pipelines {
  id      Int     @id @default(autoincrement())
  prompt String?
  context String?
  remark  String?
  affiliate_count Int?

  Business    Business? @relation(fields: [business_id], references: [id])
  business_id String?   @db.Uuid
  Products    Products? @relation(fields: [product_id], references: [id])
  product_id  Int?

  @@schema("public")
}

model Waitlist {
  id         String   @id @default(cuid())
  email      String   @unique
  created_at DateTime @default(now())

  @@schema("public")
}

model Pending_Payments {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_id   String    @db.Uuid
  product_id    Int
  full_amount   Decimal?  @db.Decimal(10, 2)
  fiat_amount   Decimal?  @db.Decimal(10, 2)
  crypto_amount Decimal?  @db.Decimal(10, 2)
  payout_date   DateTime? @db.Date
  status        String    @default("Pending")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  business Business @relation(fields: [business_id], references: [id])

  @@map("pending_payments")
  @@schema("public")
}
